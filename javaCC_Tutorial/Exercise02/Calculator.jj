/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options {
    LOOKAHEAD=1;
}

PARSER_BEGIN(Calculator)

public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
    public static void main(String args[]) throws ParseException {
        System.out.println("Parser for a calculator that accepts expressions with integers, +, -, *, /, ( and ).");
        System.out.println("Write arithmetic expression:");
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression();

        root.dump("");
        System.out.println("Expression value: " + myCalc.eval(root));
    }

    int eval(SimpleNode node) {
        if (node.jjtGetNumChildren() == 0) {
            return node.val;
        } else {
            if (node.jjtGetNumChildren() == 1) {
                return this.eval((SimpleNode) node.jjtGetChild(0));
            }
        }

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0);
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1);

        switch (node.id) {
            case CalculatorTreeConstants.JJTADD : return eval(lhs) + eval(rhs);
            case CalculatorTreeConstants.JJTSUB : return eval(lhs) - eval(rhs);
            case CalculatorTreeConstants.JJTMUL : return eval(lhs) * eval(rhs);
            case CalculatorTreeConstants.JJTDIV : return eval(lhs) / eval(rhs);
            default:
                System.out.println("Illegal Operator!");
                System.exit(1);
        }
        return 0;
    }

}
PARSER_END(Calculator)

SKIP : {
    " "|" \r "|" \t"
}

TOKEN : {
    <INTEGER : (["0"-"9"])+> | <LF: "\n">
}

SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    Expr1(1) <LF>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr1(int sign)      : {}
{
    Expr2(sign) [("+"/*@bgen(jjtree) #Add( 2) */
                      {
                        SimpleNode jjtn001 = new SimpleNode(JJTADD);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ Expr2(sign)/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/         | "-"/*@bgen(jjtree) #Sub( 2) */
                                                {
                                                  SimpleNode jjtn002 = new SimpleNode(JJTSUB);
                                                  boolean jjtc002 = true;
                                                  jjtree.openNodeScope(jjtn002);
                                                }
                                                try {
/*@egen*/ Expr2(sign)/*@bgen(jjtree)*/
                                                } catch (Throwable jjte002) {
                                                  if (jjtc002) {
                                                    jjtree.clearNodeScope(jjtn002);
                                                    jjtc002 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte002 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte002;
                                                  }
                                                  if (jjte002 instanceof ParseException) {
                                                    throw (ParseException)jjte002;
                                                  }
                                                  throw (Error)jjte002;
                                                } finally {
                                                  if (jjtc002) {
                                                    jjtree.closeNodeScope(jjtn002,  2);
                                                  }
                                                }
/*@egen*/        )]
}

void Expr2(int sign)      : {}
{
    Expr3(sign) [("*"/*@bgen(jjtree) #Mul( 2) */
                      {
                        SimpleNode jjtn001 = new SimpleNode(JJTMUL);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/         | "/"/*@bgen(jjtree) #Div( 2) */
                                             {
                                               SimpleNode jjtn002 = new SimpleNode(JJTDIV);
                                               boolean jjtc002 = true;
                                               jjtree.openNodeScope(jjtn002);
                                             }
                                             try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
                                             } catch (Throwable jjte002) {
                                               if (jjtc002) {
                                                 jjtree.clearNodeScope(jjtn002);
                                                 jjtc002 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte002 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte002;
                                               }
                                               if (jjte002 instanceof ParseException) {
                                                 throw (ParseException)jjte002;
                                               }
                                               throw (Error)jjte002;
                                             } finally {
                                               if (jjtc002) {
                                                 jjtree.closeNodeScope(jjtn002,  2);
                                               }
                                             }
/*@egen*/        )]
}

void Expr3(int sign)      : {Token t;}
{
    t=<INTEGER>/*@bgen(jjtree) Term */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTTERM);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                }
/*@egen*/ {jjtn001.val = sign*Integer.parseInt(t.image);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/       | "-"/*@bgen(jjtree) Sign */
                                                                            {
                                                                              SimpleNode jjtn002 = new SimpleNode(JJTSIGN);
                                                                              boolean jjtc002 = true;
                                                                              jjtree.openNodeScope(jjtn002);
                                                                            }
                                                                            try {
/*@egen*/ Expr3(-sign)/*@bgen(jjtree)*/
                                                                            } catch (Throwable jjte002) {
                                                                              if (jjtc002) {
                                                                                jjtree.clearNodeScope(jjtn002);
                                                                                jjtc002 = false;
                                                                              } else {
                                                                                jjtree.popNode();
                                                                              }
                                                                              if (jjte002 instanceof RuntimeException) {
                                                                                throw (RuntimeException)jjte002;
                                                                              }
                                                                              if (jjte002 instanceof ParseException) {
                                                                                throw (ParseException)jjte002;
                                                                              }
                                                                              throw (Error)jjte002;
                                                                            } finally {
                                                                              if (jjtc002) {
                                                                                jjtree.closeNodeScope(jjtn002, true);
                                                                              }
                                                                            }
/*@egen*/       | "(" Expr1(sign) ")"
}